# -*- coding: utf-8 -*-
"""matplotlib session 1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/rowansiwakoti/2523aa5024e3d861c07acf12db4f9b77/untitled0.ipynb
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Types of data
# 1. Numerical
# 2. Categorical
# 3. Ordinal

# 2D line plot -> Used for bivariate analysis (only two column)

# Can be applied on following conditions:
# First column should be numerical and second also numerical
# One numerical and another categorial

# Usage -> Time series data.
# Example, company stocks, company revenue, covid day to day cases

# Plotting a simple function --- 2D plot

price = [48000, 54000, 57000, 23000, 98000, 12000] # Numerical
year = [2015, 2016, 2017, 2018, 2019, 2020] # Categorial

# categorial on the x axis
# numerical on the y axis

plt.plot(year, price)
# plt.show()

batsman = pd.read_csv('/content/sharma-kohli.csv')
batsman.head()

plt.plot(batsman['index'], batsman['V Kohli'])

plt.plot(batsman['index'], batsman['V Kohli'])
plt.plot(batsman['index'], batsman['RG Sharma'])
plt.legend(['V Kohli', 'RG Sharma'])
plt.title('V Kohli vs RG Sharma Comparison')
plt.xlabel('Year')
plt.ylabel('Runs')

# Changing line colors
plt.plot(batsman['index'], batsman['V Kohli'], color='green')
plt.plot(batsman['index'], batsman['RG Sharma'], color='red')
plt.legend(['V Kohli', 'RG Sharma'])
plt.title('V Kohli vs RG Sharma Comparison')
plt.xlabel('Year')
plt.ylabel('Runs')

# Styling lines
plt.plot(batsman['index'], batsman['V Kohli'], color='green', linestyle='dashed') #dashdot is also present #solid is default
plt.plot(batsman['index'], batsman['RG Sharma'], color='red', linestyle='dotted')
plt.legend(['V Kohli', 'RG Sharma'])
plt.title('V Kohli vs RG Sharma Comparison')
plt.xlabel('Year')
plt.ylabel('Runs')

# Styling lines, increasing width
plt.plot(batsman['index'], batsman['V Kohli'], color='green', linestyle='dashdot', linewidth=3) #dashdot is also present #solid is default
plt.plot(batsman['index'], batsman['RG Sharma'], color='red', linestyle='dotted', linewidth=2)
plt.legend(['V Kohli', 'RG Sharma'])
plt.title('V Kohli vs RG Sharma Comparison')
plt.xlabel('Year')
plt.ylabel('Runs')

# Too see points/markers and it's size
plt.plot(batsman['index'], batsman['V Kohli'], color='green', linestyle='dashdot', linewidth=3, marker='D', label='Virat Kohli Vai') #dashdot is also present #solid is default
plt.plot(batsman['index'], batsman['RG Sharma'], color='red', linestyle='dotted', linewidth=2, marker='o', markersize='10', label='Rohit Sharma Dai')
plt.legend(loc='upper right')
plt.title('V Kohli vs RG Sharma Comparison')
plt.xlabel('Year')
plt.ylabel('Runs')

# Limiting axes, use this if outliers are present
price = [48000, 54000, 57000, 23000, 98000, 6500000] # Numerical
year = [2015, 2016, 2017, 2018, 2019, 2020] # Categorial

plt.plot(year, price)

price = [48000, 54000, 57000, 23000, 98000, 6500000] # Numerical
year = [2015, 2016, 2017, 2018, 2019, 2020] # Categorial

plt.plot(year, price)
plt.ylim(0, 200000)

price = [48000, 54000, 57000, 23000, 98000, 6500000] # Numerical
year = [2015, 2016, 2017, 2018, 2019, 2020] # Categorial

plt.plot(year, price)
plt.xlim(2017, 2020)

# Show grid
plt.plot(batsman['index'], batsman['V Kohli'], color='green', linestyle='dashdot', linewidth=3, marker='D', label='Virat Kohli Vai') #dashdot is also present #solid is default
plt.plot(batsman['index'], batsman['RG Sharma'], color='red', linestyle='dotted', linewidth=2, marker='o', markersize='10', label='Rohit Sharma Dai')
plt.legend(loc='upper right')
plt.title('V Kohli vs RG Sharma Comparison')
plt.xlabel('Year')
plt.ylabel('Runs')
plt.grid()

# plt.show() should be called if working on IDEs
plt.plot(batsman['index'], batsman['V Kohli'], color='green', linestyle='dashdot', linewidth=3, marker='D', label='Virat Kohli Vai') #dashdot is also present #solid is default
plt.plot(batsman['index'], batsman['RG Sharma'], color='red', linestyle='dotted', linewidth=2, marker='o', markersize='10', label='Rohit Sharma Dai')
plt.legend(loc='upper right')
plt.title('V Kohli vs RG Sharma Comparison')
plt.xlabel('Year')
plt.ylabel('Runs')
plt.grid()
plt.show()

# Scatter plot (2D plot is Scatter plot with lines)
# Used for Bivariate analysis
# Numerical vs Numerical Column
# To find correlation between two quantities

x = np.linspace(-10, 10, 50)
y = 10* x + 3 + np.random.randint(0, 300, 50)

plt.scatter(x, y)

df = pd.read_csv('/content/batter.csv')
df = df.head(50)
df

plt.scatter(df['avg'], df['strike_rate'], color='red', marker='o')
plt.title('Avg and SR analysis of Top 50 Batsman')
plt.xlabel('Average')
plt.ylabel('Strike Rate')

# size
tips = sns.load_dataset('tips')
tips.head()

# size means kati jana aako thiye group maa
# dherai jana huda dot thulo, thorai jana huda dot sano
plt.scatter(tips['total_bill'], tips['tip'], s=tips['size']*10)

# scatter function call nagari pani scatter plot draw garna milxa
# But size and colors manipulate garna mildaina
# This is faster technique
# scatter function is slower
plt.plot(tips['total_bill'], tips['tip'], 'o')

# Bar Chart
# X axis categorial
# Y axis numerical
# Bivariate and Univariate
# Usage -> Aggregate analysis of groups

# simple bar chart
children = [10, 20, 40, 10, 30]
colors = ['red', 'green', 'blue', 'yellow', 'pink']

plt.bar(colors, children)

# simple bar chart
children = [10, 20, 40, 10, 30]
colors = ['red', 'green', 'blue', 'yellow', 'pink']

plt.barh(colors, children)

df = pd.read_csv('/content/batsman_season_record.csv');
df.head()

plt.bar(np.arange(df.shape[0]) - 0.2, df['2015'], width=0.2)
plt.bar(np.arange(df.shape[0]), df['2016'], width=0.2)
plt.bar(np.arange(df.shape[0]) + 0.2, df['2017'], width=0.2)

plt.xticks(np.arange(df.shape[0]), df['batsman'])
plt.legend(['2015', '2016', '2017'])
plt.show()

children = [10, 20, 40, 10, 30]
colors = ['red ref red red red red', 'green green greeeeeeeeeeee', 'blue blueeeeeeeeeeeeeee', 'yellow yelowwwwwwwwwwwwwwwwwwwwwwww', 'pinkkkkkkkkkkkkkkkkkkkkk']

plt.bar(colors, children)
# plt.xticks(rotation=90)
plt.xticks(rotation='vertical')

# stacked bar chart
plt.bar(df['batsman'], df['2017'])
plt.bar(df['batsman'], df['2016'], bottom=df['2017'])
plt.bar(df['batsman'], df['2015'], bottom=df['2016'] + df['2017'])
plt.legend(['2017', '2016', '2015'])
plt.show()

# Histogram
# Univariate analysis
# Numerical col
# Use case - Frequency count

data = [32, 45, 56, 10, 15, 27, 61]
plt.hist(data)
plt.show()

data = [32, 45, 56, 10, 15, 27, 61]
plt.hist(data, bins=[10, 25, 40, 55, 70])
plt.show()

df = pd.read_csv('/content/vk.csv')
df.head()

plt.hist(df['batsman_runs'], bins = [20, 40, 60, 80, 100, 120])

# logarithmic scale to show smaller values
arr = np.load('/content/big-array.npy')

plt.hist(arr, log=True)

# pie chart
# Univariate / Bivariate analysis
# Categorical vs Numerical
# Use case- use to find contribution on a standard scale (%)

data = [20, 60, 40, 34, 67, 39]
subjects = ['Maths', 'Physics', 'Chemistry', 'Biology', 'English', 'Nepali']
plt.pie(data, labels = subjects, autopct='%.2f%%', explode=[0, 0, 0.1, 0, 0, 0])
plt.show()

# changing default styles of matplotlib
plt.style.available

plt.style.use('tableau-colorblind10')

# Exporting or saving figures
# plt.show paxi savefig garda hudaina
plt.savefig('my_figure.png')